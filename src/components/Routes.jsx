import { createBrowserRouter } from "react-router-dom";

import Main from "./Main/Main";
import PageInfo from "./PageInfo/PageInfo";

import lin from '../resources/exe/Линейные_алгоритмы.exe';
import rv from '../resources/exe/Составление_разветвляющихся_алгоритмов.exe';
import form from '../resources/exe/Формы_записи_алгоритмов.exe';
import graph from '../resources/exe/Графическая_форма_записи_алгоритма.exe';
import sum from '../resources/exe/Формулы_суммы_и_произведения.exe';
import prog from '../resources/exe/Анализ_программ.exe';

export const ROUTES = {
    main: '/',
    first: '/first',
    second: '/second', 
    third: '/third',
    fourth: '/fourth',
    gp_first: '/gp_first',
    gp_second: '/gp_second', 
}


export const routes = createBrowserRouter([
    {
        path: ROUTES.main,
        element: <Main />,
    },
    {
        path: ROUTES.first,
        element: <PageInfo
            title='Линейные алгоритмы'
            children={<>
                <p>Линейные алгоритмы - это класс алгоритмов машинного обучения, который использует линейную комбинацию входных признаков для прогнозирования выходного значения.</p>
                <p>В задачах классификации линейный алгоритм пытается разделить данные на два или более класса, используя линейную гиперплоскость в пространстве признаков. Примерами линейных алгоритмов для классификации являются логистическая регрессия, метод опорных векторов и персептрон.</p>
                <p>В задачах регрессии линейный алгоритм используется для прогнозирования непрерывных выходных значений, например, для прогнозирования цены дома на основе его характеристик. Примерами линейных алгоритмов для регрессии являются линейная регрессия и регрессия на основе метода наименьших квадратов.</p>
                <p>Линейные алгоритмы относительно просты в реализации и быстро работают на больших наборах данных. Они также могут быть интерпретированы, что позволяет анализировать вклад каждого признака в итоговый прогноз. Однако, они могут быть неэффективными для данных, которые не могут быть разделены линейной гиперплоскостью, и могут производить менее точные прогнозы, чем более сложные модели.</p>
            </>}
            link={lin}
        />,
    },
    {
        path: ROUTES.second,
        element: <PageInfo 
                title='Формы записи алгоритмов'
                children={<>
                    <p>Существует несколько форм записи алгоритмов, каждая из которых имеет свои преимущества и недостатки. Рассмотрим три основных формы записи алгоритмов: словесно пошаговую, табличную и запись на алгоритмическом языке.</p>
                    <ol>
                        <li>
                            Словесно пошаговая форма записи алгоритма - это форма записи, которая описывает последовательность действий, необходимых для выполнения задачи. Она описывает каждый шаг алгоритма на естественном языке и может быть очень полезна для общего понимания алгоритма, особенно для людей, не имеющих технического образования.
                        </li>
                        <li>
                            Табличная форма записи алгоритма - это форма записи, в которой каждый шаг алгоритма записывается в отдельной строке таблицы, а каждый столбец таблицы соответствует конкретной информации, например, названию действия, входным данным, выходным данным и т.д. Такая форма записи может быть полезна для удобства визуализации алгоритма, когда нужно описать более сложные алгоритмы или когда нужно сравнить несколько алгоритмов.
                        </li>
                        <li>
                            Запись на алгоритмическом языке - это форма записи алгоритма на специальном языке программирования, который используется для написания компьютерных программ. Эта форма записи наиболее точна и позволяет компьютеру понимать алгоритм и выполнять его. Однако, для понимания алгоритма на языке программирования необходимы знания этого языка.
                        </li>
                    </ol>
                    <p>Таким образом, каждая из форм записи алгоритмов имеет свои преимущества и недостатки, и выбор конкретной формы зависит от цели записи алгоритма и предполагаемой аудитории. В любом случае, цель алгоритма состоит в том, чтобы обеспечить эффективное решение задачи, и выбор формы записи должен быть наиболее соответствующим этой цели.</p>
                </>}
                link={form}
            />
    },
    {
        path: ROUTES.third,
        element: <PageInfo 
                title='Составление разветвляющихся алгоритмов'
                children={<>
                    <p>Разветвляющийся алгоритм - это алгоритм, который имеет разные пути выполнения в зависимости от исходных условий. Составление разветвляющихся алгоритмов можно разбить на следующие шаги:</p>
                    <ol>
                        <li>Определение условий ветвления: вы должны определить, какое условие будет использоваться для принятия решения. Например, если вы пишете алгоритм для классификации фруктов, вы можете использовать условие "если фрукт красный, то это яблоко, иначе это может быть что-то другое".</li>
                        <li>Определение действий на каждом пути выполнения: для каждого возможного исхода условия ветвления вы должны определить, какие действия должны быть выполнены. Например, если фрукт красный, вы можете установить значение переменной "это яблоко" равным истине, а если фрукт не красный, то вы можете просто перейти к следующему шагу алгоритма.</li>
                        <li>Построение блок-схемы: на этом шаге вы можете создать блок-схему, которая показывает логику вашего разветвляющегося алгоритма. Блок-схема должна содержать блоки, представляющие условия ветвления и блоки, представляющие действия на каждом пути выполнения.</li>
                        <li>Тестирование и отладка: после того, как вы создали блок-схему, вы должны протестировать ваш алгоритм на различных входных данных, чтобы убедиться, что он работает правильно. Если вы обнаружите ошибки или проблемы, вам придется отладить ваш алгоритм, изменяя его логику или условия ветвления.</li>
                    </ol>
                </>}
                link={rv}
            />
    },
    {
        path: ROUTES.fourth,
        element: <PageInfo 
                title='Анализ программ'
                children={<></>}
                link={prog}
            />
    },
    {
        path: ROUTES.gp_first,
        element: <PageInfo 
                title='Графическая форма записи алгоритмов'
                children={<>
                    <p>Графическая форма записи алгоритма называется блок-схема. Блок-схема представляет собой диаграмму, состоящую из блоков различных форм и соединительных линий, которые показывают последовательность выполнения действий.</p>
                    <p>Каждый блок в блок-схеме представляет отдельный этап выполнения алгоритма, который может включать в себя операции, условия, циклы и другие конструкции языка программирования. Блоки могут быть различной формы и цвета, в зависимости от их роли в алгоритме.</p>
                    <p>Соединительные линии между блоками указывают на порядок выполнения действий. Они могут быть простыми или сложными, в зависимости от сложности алгоритма.</p>
                    <p>Преимущество графической формы записи алгоритма заключается в том, что она позволяет визуально представить логику выполнения программы. Это удобно при разработке сложных алгоритмов, а также при обучении программированию.</p>
                    <p>Блок-схемы могут быть созданы с помощью специальных программных средств, таких как Visio или Lucidchart, или на бумаге при помощи карандаша и линейки. В любом случае, блок-схема должна быть понятной и легко читаемой, чтобы другие люди могли легко понять, как работает алгоритм.</p>
                </>}
                link={graph}
            />
    },
    {
        path: ROUTES.gp_second,
        element: <PageInfo 
                title='Формулы суммы и произведения'
                children={<></>}
                link={sum}
            />
    }
  ]);