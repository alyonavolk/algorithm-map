import { useEffect, useState } from "react";
import { Route, Routes, useLocation } from "react-router-dom";

import Main from "./Main/Main";
import PageInfo from "./PageInfo/PageInfo";
import { map, TMap } from '../resources/Map';

const lin = require('../resources/exe/Линейные_алгоритмы.exe');
const rv = require('../resources/exe/Составление_разветвляющихся_алгоритмов.exe');
const form = require('../resources/exe/Формы_записи_алгоритмов.exe');
const graph = require('../resources/exe/Графическая_форма_записи_алгоритма.exe');
const sum = require('../resources/exe/Формулы_суммы_и_произведения.exe');
const prog = require('../resources/exe/Анализ_программ.exe');

export const ROUTES = {
    main: '/',
    first: '/first',
    second: '/second', 
    third: '/third',
    fourth: '/fourth',
    gp_first: '/gp_first',
    gp_second: '/gp_second', 
}

const RoutesPages = () => {
    const location = useLocation();
    const [status, setStatus] = useState(0);

    const parse = (name: string, rt: boolean | string):boolean | string => {
        const local  = localStorage.getItem(name);
        if (typeof local === 'string') {
            const parse: boolean = JSON.parse(local)
            return parse;
        }
        return rt
    }

    const [name, setName] = useState(parse('name', ''));
    const [entry, setEntry] = useState(parse('entry', true));

    
    const parseMap = ():TMap => {
        const local  = localStorage.getItem('map');
        if (typeof local === 'string') {
            const parse: TMap = JSON.parse(local)
            return parse;
        }
        return map
    }

    const [mapValue, setMapValue] = useState(parseMap());

    const local = (name: string, local: object | string | boolean) => {
        localStorage.setItem(name, JSON.stringify(local))
    }

    const startMap = () => {
        if (name === '') {
            return 
        }
        setEntry(false);
        setMapValue(val => ({...val, route1: true, gh_route1: true}))
        local('name', name)
    }

    const ClearMap = () => {
        setEntry(true);
        setMapValue(map);
        localStorage.removeItem('map');
        localStorage.removeItem('name');
        localStorage.removeItem('entry');
    }

    useEffect(() => {
        local('map',mapValue)
        local('entry', entry)
        setStatus(0);
        Object.values(mapValue).map(value => setStatus( s => value ? s + 16 : s))
    }, [mapValue, entry])

    
    useEffect(() => {
    }, [mapValue])

    useEffect(() => {
        location.pathname === ROUTES.first && setMapValue(val => ({...val, route2: true}))
        location.pathname === ROUTES.second && setMapValue(val => ({...val, route3: true}))
        location.pathname === ROUTES.third && setMapValue(val => ({...val, route4: true}))
        location.pathname === ROUTES.gp_first && setMapValue(val => ({...val, gh_route2: true}))
    }, [location])
      
    return (
        <Routes location={location}>
            <Route path={ROUTES.main}
                element={
                    <Main mapValue={mapValue}
                        name={name}
                        setName={setName}
                        entry={entry}
                        status={status}
                        startMap={startMap}
                        ClearMap={ClearMap}
                    />
                }
            />
            <Route path={ROUTES.first}
                element={
                    <PageInfo
                        title='Линейные алгоритмы'
                        children={<>
                            <p>Линейные алгоритмы - это класс алгоритмов машинного обучения, который использует линейную комбинацию входных признаков для прогнозирования выходного значения.</p>
                            <p>В задачах классификации линейный алгоритм пытается разделить данные на два или более класса, используя линейную гиперплоскость в пространстве признаков. Примерами линейных алгоритмов для классификации являются логистическая регрессия, метод опорных векторов и персептрон.</p>
                            <p>В задачах регрессии линейный алгоритм используется для прогнозирования непрерывных выходных значений, например, для прогнозирования цены дома на основе его характеристик. Примерами линейных алгоритмов для регрессии являются линейная регрессия и регрессия на основе метода наименьших квадратов.</p>
                            <p>Линейные алгоритмы относительно просты в реализации и быстро работают на больших наборах данных. Они также могут быть интерпретированы, что позволяет анализировать вклад каждого признака в итоговый прогноз. Однако, они могут быть неэффективными для данных, которые не могут быть разделены линейной гиперплоскостью, и могут производить менее точные прогнозы, чем более сложные модели.</p>
                        </>}
                        link={lin}
                    />
                }
            />
            <Route path={ROUTES.second}
                element={
                    <PageInfo 
                        title='Формы записи алгоритмов'
                        children={<>
                            <p>Существует несколько форм записи алгоритмов, каждая из которых имеет свои преимущества и недостатки. Рассмотрим три основных формы записи алгоритмов: словесно пошаговую, табличную и запись на алгоритмическом языке.</p>
                            <ol>
                                <li>
                                    Словесно пошаговая форма записи алгоритма - это форма записи, которая описывает последовательность действий, необходимых для выполнения задачи. Она описывает каждый шаг алгоритма на естественном языке и может быть очень полезна для общего понимания алгоритма, особенно для людей, не имеющих технического образования.
                                </li>
                                <li>
                                    Табличная форма записи алгоритма - это форма записи, в которой каждый шаг алгоритма записывается в отдельной строке таблицы, а каждый столбец таблицы соответствует конкретной информации, например, названию действия, входным данным, выходным данным и т.д. Такая форма записи может быть полезна для удобства визуализации алгоритма, когда нужно описать более сложные алгоритмы или когда нужно сравнить несколько алгоритмов.
                                </li>
                                <li>
                                    Запись на алгоритмическом языке - это форма записи алгоритма на специальном языке программирования, который используется для написания компьютерных программ. Эта форма записи наиболее точна и позволяет компьютеру понимать алгоритм и выполнять его. Однако, для понимания алгоритма на языке программирования необходимы знания этого языка.
                                </li>
                            </ol>
                            <p>Таким образом, каждая из форм записи алгоритмов имеет свои преимущества и недостатки, и выбор конкретной формы зависит от цели записи алгоритма и предполагаемой аудитории. В любом случае, цель алгоритма состоит в том, чтобы обеспечить эффективное решение задачи, и выбор формы записи должен быть наиболее соответствующим этой цели.</p>
                        </>}
                        link={form}
                    />
                }
            />
            <Route path={ROUTES.third}
                element={
                    <PageInfo 
                        title='Составление разветвляющихся алгоритмов'
                        children={<>
                            <p>Разветвляющийся алгоритм - это алгоритм, который имеет разные пути выполнения в зависимости от исходных условий. Составление разветвляющихся алгоритмов можно разбить на следующие шаги:</p>
                            <ol>
                                <li>Определение условий ветвления: вы должны определить, какое условие будет использоваться для принятия решения. Например, если вы пишете алгоритм для классификации фруктов, вы можете использовать условие "если фрукт красный, то это яблоко, иначе это может быть что-то другое".</li>
                                <li>Определение действий на каждом пути выполнения: для каждого возможного исхода условия ветвления вы должны определить, какие действия должны быть выполнены. Например, если фрукт красный, вы можете установить значение переменной "это яблоко" равным истине, а если фрукт не красный, то вы можете просто перейти к следующему шагу алгоритма.</li>
                                <li>Построение блок-схемы: на этом шаге вы можете создать блок-схему, которая показывает логику вашего разветвляющегося алгоритма. Блок-схема должна содержать блоки, представляющие условия ветвления и блоки, представляющие действия на каждом пути выполнения.</li>
                                <li>Тестирование и отладка: после того, как вы создали блок-схему, вы должны протестировать ваш алгоритм на различных входных данных, чтобы убедиться, что он работает правильно. Если вы обнаружите ошибки или проблемы, вам придется отладить ваш алгоритм, изменяя его логику или условия ветвления.</li>
                            </ol>
                        </>}
                        link={rv}
                    />
                }
            />
            <Route path={ROUTES.fourth}
                element={
                    <PageInfo 
                        title='Анализ программ'
                        children={<>
                            <p>Алгоритмы - это последовательности инструкций, которые решают определенную задачу. Вот некоторая информация об алгоритмах на различных языках программирования:</p>
                            <ol>
                                <li>Алгоритмический язык - это специальный язык для описания алгоритмов. Он не является программным языком в строгом смысле и не имеет синтаксических правил, свойственных языкам программирования. Вместо этого он предназначен для создания логической структуры алгоритма, определения последовательности шагов и управления данными. Алгоритмический язык обычно используется в начальном обучении программированию для развития навыков разработки алгоритмов.</li>
                                <li>Python - это высокоуровневый язык программирования, который широко используется для разработки алгоритмов. Он обладает простым и понятным синтаксисом, что делает его доступным для начинающих программистов. В Python вы можете разрабатывать алгоритмы, используя условные выражения (if-else), циклы (for, while), функции, списки и другие структуры данных. Python также предлагает множество стандартных библиотек, которые содержат реализации различных алгоритмических задач, таких как сортировка, поиск и т. д.</li>
                                <li>C++ - это язык программирования общего назначения, который предоставляет мощные возможности для разработки алгоритмов. C++ является компилируемым языком, который позволяет эффективно управлять памятью и ресурсами компьютера. В C++ вы можете использовать условные операторы (if-else), циклы (for, while), функции, указатели и другие возможности языка для разработки алгоритмов. C++ также обладает богатой стандартной библиотекой, которая содержит множество классов и функций для работы с различными структурами данных и алгоритмическими задачами.</li>
                                <li>BASIC (Beginner's All-purpose Symbolic Instruction Code) - это простой язык программирования, разработанный для обучения и начального программирования. В BASIC алгоритмы описываются в виде последовательности команд, которые выполняются по порядку. BASIC предоставляет возможности для работы с условными операторами (if-then-else), циклами (for, while), функциями и базовыми операциями над данными. Хотя BASIC не так распространен и мощен, как некоторые другие языки программирования, он остается популярным выбором для начинающих программистов и обучения основам алгоритмического мышления.</li>
                                <li>Pascal - это язык программирования, созданный с целью обеспечить четкую и структурированную разработку программ. В Pascal вы можете создавать алгоритмы с использованием условных операторов (if-then-else), циклов (for, while), процедур и функций. Pascal обладает строгим синтаксисом и предлагает семантические правила, которые способствуют ясности и структурированности к подходу алгоритмов. Он обеспечивает типизацию данных, что помогает предотвратить ошибки во время выполнения программы. Pascal также предлагает множество встроенных функций и библиотек для работы с различными структурами данных и алгоритмическими задачами.</li>
                            </ol>
                        </>}
                        link={prog}
                    />
                }
            />
            <Route path={ROUTES.gp_first}
                element={
                    <PageInfo 
                        title='Графическая форма записи алгоритмов'
                        children={<>
                            <p>Графическая форма записи алгоритма называется блок-схема. Блок-схема представляет собой диаграмму, состоящую из блоков различных форм и соединительных линий, которые показывают последовательность выполнения действий.</p>
                            <p>Каждый блок в блок-схеме представляет отдельный этап выполнения алгоритма, который может включать в себя операции, условия, циклы и другие конструкции языка программирования. Блоки могут быть различной формы и цвета, в зависимости от их роли в алгоритме.</p>
                            <p>Соединительные линии между блоками указывают на порядок выполнения действий. Они могут быть простыми или сложными, в зависимости от сложности алгоритма.</p>
                            <p>Преимущество графической формы записи алгоритма заключается в том, что она позволяет визуально представить логику выполнения программы. Это удобно при разработке сложных алгоритмов, а также при обучении программированию.</p>
                            <p>Блок-схемы могут быть созданы с помощью специальных программных средств, таких как Visio или Lucidchart, или на бумаге при помощи карандаша и линейки. В любом случае, блок-схема должна быть понятной и легко читаемой, чтобы другие люди могли легко понять, как работает алгоритм.</p>
                        </>}
                        link={graph}
                    />
                }
            />
            <Route path={ROUTES.gp_second}
                element={
                        <PageInfo 
                            title='Формулы суммы и произведения'
                            children={<>
                                <p>Алгоритмы и формулы для вычисления сумм и произведений являются фундаментальными инструментами в математике и программировании. Они позволяют с легкостью выполнять вычисления и суммировать или умножать большое количество чисел или элементов.</p>
                                <ol>
                                    <li>Формула суммы используется для вычисления суммы ряда чисел. Она обозначается символом "Σ" (сумма) и записывается в следующем виде:<br/>
                                    S = a₁ + a₂ + a₃ + ... + aₙ,<br/>
                                    где S - сумма всех элементов ряда, a₁, a₂, ..., aₙ - элементы ряда, n - количество элементов в ряде.
                                    <br/>Пример:<br/>
                                    Для вычисления суммы ряда чисел от 1 до 5, формула будет выглядеть следующим образом: S = 1 + 2 + 3 + 4 + 5 = 15.</li>
                                    <li>Алгоритм суммы представляет собой последовательное сложение всех элементов ряда. В псевдокоде он может выглядеть следующим образом:<br/>
                                    Инициализировать переменную S = 0.<br/>
                                    Для каждого элемента aᵢ в ряде:<br/>
                                    Прибавить aᵢ к переменной S.<br/>
                                    Вывести значение S.</li>
                                    <li>Формула произведения используется для вычисления произведения ряда чисел. Она обозначается символом "∏" (произведение) и записывается в следующем виде:<br/>
                                    P = a₁ * a₂ * a₃ * ... * aₙ,<br/>
                                    где P - произведение всех элементов ряда, a₁, a₂, ..., aₙ - элементы ряда, n - количество элементов в ряде.
                                    <br/>Пример:<br/>
                                    Для вычисления произведения ряда чисел от 1 до 5, формула будет выглядеть следующим образом:
                                    P = 1 * 2 * 3 * 4 * 5 = 120.</li>
                                    <li>Алгоритм произведения аналогичен алгоритму суммы, только вместо сложения используется умножение.</li>
                                </ol>
                            </>}
                            link={sum}
                        />
                }
            />
        </Routes>
    );
  };
  
  export default RoutesPages;


// export const routes = createBrowserRouter([
//     {
//         path: ROUTES.main,
//         element: <Main />,
//     },
//     {
//         path: ROUTES.first,
//         element: <PageInfo
//             title='Линейные алгоритмы'
//             children={<>
//                 <p>Линейные алгоритмы - это класс алгоритмов машинного обучения, который использует линейную комбинацию входных признаков для прогнозирования выходного значения.</p>
//                 <p>В задачах классификации линейный алгоритм пытается разделить данные на два или более класса, используя линейную гиперплоскость в пространстве признаков. Примерами линейных алгоритмов для классификации являются логистическая регрессия, метод опорных векторов и персептрон.</p>
//                 <p>В задачах регрессии линейный алгоритм используется для прогнозирования непрерывных выходных значений, например, для прогнозирования цены дома на основе его характеристик. Примерами линейных алгоритмов для регрессии являются линейная регрессия и регрессия на основе метода наименьших квадратов.</p>
//                 <p>Линейные алгоритмы относительно просты в реализации и быстро работают на больших наборах данных. Они также могут быть интерпретированы, что позволяет анализировать вклад каждого признака в итоговый прогноз. Однако, они могут быть неэффективными для данных, которые не могут быть разделены линейной гиперплоскостью, и могут производить менее точные прогнозы, чем более сложные модели.</p>
//             </>}
//             link={lin}
//         />,
//     },
//     {
//         path: ROUTES.second,
//         element: <PageInfo 
//                 title='Формы записи алгоритмов'
//                 children={<>
//                     <p>Существует несколько форм записи алгоритмов, каждая из которых имеет свои преимущества и недостатки. Рассмотрим три основных формы записи алгоритмов: словесно пошаговую, табличную и запись на алгоритмическом языке.</p>
//                     <ol>
//                         <li>
//                             Словесно пошаговая форма записи алгоритма - это форма записи, которая описывает последовательность действий, необходимых для выполнения задачи. Она описывает каждый шаг алгоритма на естественном языке и может быть очень полезна для общего понимания алгоритма, особенно для людей, не имеющих технического образования.
//                         </li>
//                         <li>
//                             Табличная форма записи алгоритма - это форма записи, в которой каждый шаг алгоритма записывается в отдельной строке таблицы, а каждый столбец таблицы соответствует конкретной информации, например, названию действия, входным данным, выходным данным и т.д. Такая форма записи может быть полезна для удобства визуализации алгоритма, когда нужно описать более сложные алгоритмы или когда нужно сравнить несколько алгоритмов.
//                         </li>
//                         <li>
//                             Запись на алгоритмическом языке - это форма записи алгоритма на специальном языке программирования, который используется для написания компьютерных программ. Эта форма записи наиболее точна и позволяет компьютеру понимать алгоритм и выполнять его. Однако, для понимания алгоритма на языке программирования необходимы знания этого языка.
//                         </li>
//                     </ol>
//                     <p>Таким образом, каждая из форм записи алгоритмов имеет свои преимущества и недостатки, и выбор конкретной формы зависит от цели записи алгоритма и предполагаемой аудитории. В любом случае, цель алгоритма состоит в том, чтобы обеспечить эффективное решение задачи, и выбор формы записи должен быть наиболее соответствующим этой цели.</p>
//                 </>}
//                 link={form}
//             />
//     },
//     {
//         path: ROUTES.third,
//         element: <PageInfo 
//                 title='Составление разветвляющихся алгоритмов'
//                 children={<>
//                     <p>Разветвляющийся алгоритм - это алгоритм, который имеет разные пути выполнения в зависимости от исходных условий. Составление разветвляющихся алгоритмов можно разбить на следующие шаги:</p>
//                     <ol>
//                         <li>Определение условий ветвления: вы должны определить, какое условие будет использоваться для принятия решения. Например, если вы пишете алгоритм для классификации фруктов, вы можете использовать условие "если фрукт красный, то это яблоко, иначе это может быть что-то другое".</li>
//                         <li>Определение действий на каждом пути выполнения: для каждого возможного исхода условия ветвления вы должны определить, какие действия должны быть выполнены. Например, если фрукт красный, вы можете установить значение переменной "это яблоко" равным истине, а если фрукт не красный, то вы можете просто перейти к следующему шагу алгоритма.</li>
//                         <li>Построение блок-схемы: на этом шаге вы можете создать блок-схему, которая показывает логику вашего разветвляющегося алгоритма. Блок-схема должна содержать блоки, представляющие условия ветвления и блоки, представляющие действия на каждом пути выполнения.</li>
//                         <li>Тестирование и отладка: после того, как вы создали блок-схему, вы должны протестировать ваш алгоритм на различных входных данных, чтобы убедиться, что он работает правильно. Если вы обнаружите ошибки или проблемы, вам придется отладить ваш алгоритм, изменяя его логику или условия ветвления.</li>
//                     </ol>
//                 </>}
//                 link={rv}
//             />
//     },
//     {
//         path: ROUTES.fourth,
//         element: <PageInfo 
//                 title='Анализ программ'
//                 children={<>
//                     <p>Алгоритмы - это последовательности инструкций, которые решают определенную задачу. Вот некоторая информация об алгоритмах на различных языках программирования:</p>
//                     <ol>
//                         <li>Алгоритмический язык - это специальный язык для описания алгоритмов. Он не является программным языком в строгом смысле и не имеет синтаксических правил, свойственных языкам программирования. Вместо этого он предназначен для создания логической структуры алгоритма, определения последовательности шагов и управления данными. Алгоритмический язык обычно используется в начальном обучении программированию для развития навыков разработки алгоритмов.</li>
//                         <li>Python - это высокоуровневый язык программирования, который широко используется для разработки алгоритмов. Он обладает простым и понятным синтаксисом, что делает его доступным для начинающих программистов. В Python вы можете разрабатывать алгоритмы, используя условные выражения (if-else), циклы (for, while), функции, списки и другие структуры данных. Python также предлагает множество стандартных библиотек, которые содержат реализации различных алгоритмических задач, таких как сортировка, поиск и т. д.</li>
//                         <li>C++ - это язык программирования общего назначения, который предоставляет мощные возможности для разработки алгоритмов. C++ является компилируемым языком, который позволяет эффективно управлять памятью и ресурсами компьютера. В C++ вы можете использовать условные операторы (if-else), циклы (for, while), функции, указатели и другие возможности языка для разработки алгоритмов. C++ также обладает богатой стандартной библиотекой, которая содержит множество классов и функций для работы с различными структурами данных и алгоритмическими задачами.</li>
//                         <li>BASIC (Beginner's All-purpose Symbolic Instruction Code) - это простой язык программирования, разработанный для обучения и начального программирования. В BASIC алгоритмы описываются в виде последовательности команд, которые выполняются по порядку. BASIC предоставляет возможности для работы с условными операторами (if-then-else), циклами (for, while), функциями и базовыми операциями над данными. Хотя BASIC не так распространен и мощен, как некоторые другие языки программирования, он остается популярным выбором для начинающих программистов и обучения основам алгоритмического мышления.</li>
//                         <li>Pascal - это язык программирования, созданный с целью обеспечить четкую и структурированную разработку программ. В Pascal вы можете создавать алгоритмы с использованием условных операторов (if-then-else), циклов (for, while), процедур и функций. Pascal обладает строгим синтаксисом и предлагает семантические правила, которые способствуют ясности и структурированности к подходу алгоритмов. Он обеспечивает типизацию данных, что помогает предотвратить ошибки во время выполнения программы. Pascal также предлагает множество встроенных функций и библиотек для работы с различными структурами данных и алгоритмическими задачами.</li>
//                     </ol>
//                 </>}
//                 link={prog}
//             />
//     },
//     {
//         path: ROUTES.gp_first,
//         element: <PageInfo 
//                 title='Графическая форма записи алгоритмов'
//                 children={<>
//                     <p>Графическая форма записи алгоритма называется блок-схема. Блок-схема представляет собой диаграмму, состоящую из блоков различных форм и соединительных линий, которые показывают последовательность выполнения действий.</p>
//                     <p>Каждый блок в блок-схеме представляет отдельный этап выполнения алгоритма, который может включать в себя операции, условия, циклы и другие конструкции языка программирования. Блоки могут быть различной формы и цвета, в зависимости от их роли в алгоритме.</p>
//                     <p>Соединительные линии между блоками указывают на порядок выполнения действий. Они могут быть простыми или сложными, в зависимости от сложности алгоритма.</p>
//                     <p>Преимущество графической формы записи алгоритма заключается в том, что она позволяет визуально представить логику выполнения программы. Это удобно при разработке сложных алгоритмов, а также при обучении программированию.</p>
//                     <p>Блок-схемы могут быть созданы с помощью специальных программных средств, таких как Visio или Lucidchart, или на бумаге при помощи карандаша и линейки. В любом случае, блок-схема должна быть понятной и легко читаемой, чтобы другие люди могли легко понять, как работает алгоритм.</p>
//                 </>}
//                 link={graph}
//             />
//     },
//     {
//         path: ROUTES.gp_second,
//         element: <PageInfo 
//                 title='Формулы суммы и произведения'
//                 children={<>
//                     <p>Алгоритмы и формулы для вычисления сумм и произведений являются фундаментальными инструментами в математике и программировании. Они позволяют с легкостью выполнять вычисления и суммировать или умножать большое количество чисел или элементов.</p>
//                     <ol>
//                         <li>Формула суммы используется для вычисления суммы ряда чисел. Она обозначается символом "Σ" (сумма) и записывается в следующем виде:<br/>
//                         S = a₁ + a₂ + a₃ + ... + aₙ,<br/>
//                         где S - сумма всех элементов ряда, a₁, a₂, ..., aₙ - элементы ряда, n - количество элементов в ряде.
//                         <br/>Пример:<br/>
//                         Для вычисления суммы ряда чисел от 1 до 5, формула будет выглядеть следующим образом: S = 1 + 2 + 3 + 4 + 5 = 15.</li>
//                         <li>Алгоритм суммы представляет собой последовательное сложение всех элементов ряда. В псевдокоде он может выглядеть следующим образом:<br/>
//                         Инициализировать переменную S = 0.<br/>
//                         Для каждого элемента aᵢ в ряде:<br/>
//                         Прибавить aᵢ к переменной S.<br/>
//                         Вывести значение S.</li>
//                         <li>Формула произведения используется для вычисления произведения ряда чисел. Она обозначается символом "∏" (произведение) и записывается в следующем виде:<br/>
//                         P = a₁ * a₂ * a₃ * ... * aₙ,<br/>
//                         где P - произведение всех элементов ряда, a₁, a₂, ..., aₙ - элементы ряда, n - количество элементов в ряде.
//                         <br/>Пример:<br/>
//                         Для вычисления произведения ряда чисел от 1 до 5, формула будет выглядеть следующим образом:
//                         P = 1 * 2 * 3 * 4 * 5 = 120.</li>
//                         <li>Алгоритм произведения аналогичен алгоритму суммы, только вместо сложения используется умножение.</li>
//                     </ol>
//                 </>}
//                 link={sum}
//             />
//     }
//   ]);